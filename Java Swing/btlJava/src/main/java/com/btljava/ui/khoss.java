/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.btljava.ui;

import com.btljava.controller.KhoController;
import com.btljava.dao.impl.khoDao;
import com.btljava.helper.DataValidor;
import com.btljava.helper.MessageDialog;
import com.btljava.helper.ShereData;
import com.btljava.model.kho;
import java.awt.Color;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ASUS
 */
public class khoss extends javax.swing.JDialog {
    private fromMain mains;
    private DefaultTableModel model;
    int ids = 0;
    
    private KhoController dao = new KhoController();
    /**
     * Creates new form khoss
     */
    public khoss(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        
    }
    
    private void timkiem(){
        try{
//            khoDao dao = new khoDao();
            List<kho> list = dao.timkiem(timkiems.getText());
            model.setRowCount(0);
            for(kho kh : list){
                model.addRow(new Object[] {
                    kh.getId(), kh.getSanpham_id(), kh.getSoluong(), kh.getSoluongnhap(), kh.getDaban(), kh.getTonkho(), kh.getNgaytao()
                });
            }
            model.fireTableDataChanged();
        }catch(Exception e){
            e.printStackTrace();
            MessageDialog.showMessageError(mains, e.getMessage(), "Lỗi");
        }
    }
    
    private void phanquyen(){
        String phanquyen = String.valueOf(ShereData.dangnhap.getPhanquyen());
        if(phanquyen.equals("2")){
            deletes.hide();
        }
        if(phanquyen.equals("3")){
            add.hide();
            edits.hide();
            deletes.hide();
            
        }
    }
    
    private void initTable(){
        model = new DefaultTableModel();
        model.setColumnIdentifiers(new String[] {
            "ID", "Mã sản phẩm", "Số lượng", "Số lượng nhập", "Đã bán", "Tồn kho", "Ngày tạo"
        });
        
        tblTable.setModel(model);
    }
    
    private void loadDataTable(){
        try{
//            khoDao dao = new khoDao();
            List<kho> list = dao.findAll();
            model.setRowCount(0);
            for(kho kh : list){
                model.addRow(new Object[] {
                    kh.getId(), kh.getSanpham_id(), kh.getSoluong(), kh.getSoluongnhap(), kh.getDaban(), kh.getTonkho(), kh.getNgaytao()
                });
            }
            
            model.fireTableDataChanged();
        }catch(Exception e){
            e.printStackTrace();
            MessageDialog.showMessageError(mains, e.getMessage(), "Lỗi");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dabans = new javax.swing.JTextField();
        tonkhos = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        ngaytaos = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        timkiems = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        add = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        edits = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        deletes = new javax.swing.JButton();
        masanphams = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTable = new javax.swing.JTable();
        soluongs = new javax.swing.JTextField();
        soluongnhaps = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        quyen = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        dabans.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                dabansFocusLost(evt);
            }
        });

        jLabel1.setText(" ID");

        jLabel2.setText("Số lượng");

        timkiems.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                timkiemsKeyReleased(evt);
            }
        });

        jLabel3.setText("Số lượng nhập");

        jLabel7.setText("Tìm kiếm");

        jLabel4.setText("Đã Bán");

        add.setText("Add");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        jLabel5.setText("Tồn kho");

        edits.setText("Edit");
        edits.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editsActionPerformed(evt);
            }
        });

        jLabel6.setText("Ngày tạo");

        deletes.setText("Delete");
        deletes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletesActionPerformed(evt);
            }
        });

        tblTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblTable);

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        jLabel11.setText("Kho");

        quyen.setText("jButton1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(89, 89, 89)
                .addComponent(add)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(edits)
                .addGap(212, 212, 212)
                .addComponent(deletes)
                .addGap(137, 137, 137))
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(soluongnhaps, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(masanphams, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(soluongs, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 83, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel6)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ngaytaos, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tonkhos, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dabans, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(95, 95, 95))
            .addComponent(jScrollPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addComponent(timkiems, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39))
            .addGroup(layout.createSequentialGroup()
                .addGap(387, 387, 387)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(quyen)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(quyen))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 71, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4)
                    .addComponent(masanphams, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dabans, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5)
                    .addComponent(tonkhos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(soluongs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel6)
                    .addComponent(ngaytaos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(soluongnhaps, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(timkiems, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(add)
                    .addComponent(edits)
                    .addComponent(deletes))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void timkiemsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_timkiemsKeyReleased
        // TODO add your handling code here:

        String value = timkiems.getText();
        if(value.equals("")){
            loadDataTable();
        }else{
            timkiem();
        }
    }//GEN-LAST:event_timkiemsKeyReleased

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        // TODO add your handling code here:

        int masanpham = 0;
        int soluong = 0;
        int soluongnhap = 0;
        int daban = 0;
        int tonkho = 0;
        StringBuilder sb = new StringBuilder();

        DataValidor.kiemtra(masanphams, sb, "Mã sản phẩm không được để trống");
        DataValidor.kiemtra(soluongs, sb, "Số lượng không được để trống");
        DataValidor.kiemtra(soluongnhaps, sb, "Số lượng nhập không được để trống");
        DataValidor.kiemtra(dabans, sb, "Đã bán không được để trống");
        DataValidor.kiemtra(tonkhos, sb, "Tồn kho không được để trống");
        DataValidor.kiemtra(ngaytaos, sb, "Ngày tạo không được để trống");

        if(sb.length() > 0){
            MessageDialog.showMessageError(mains, sb.toString(), "Lỗi");
            return;
        }

        if(masanphams.getText().chars().allMatch(Character :: isDigit) && soluongs.getText().chars().allMatch(Character :: isDigit) &&
            soluongnhaps.getText().chars().allMatch(Character :: isDigit) && dabans.getText().chars().allMatch(Character :: isDigit)
            && tonkhos.getText().chars().allMatch(Character :: isDigit)){
            masanpham = Integer.parseInt(masanphams.getText());
            soluong = Integer.parseInt(soluongs.getText());
            soluongnhap = Integer.parseInt(soluongnhaps.getText());
            daban = Integer.parseInt(dabans.getText());
            tonkho = Integer.parseInt(tonkhos.getText());
        }

        try{
            kho kh = new kho();
            kh.setSanpham_id(masanpham);
            kh.setSoluong(soluong);
            kh.setSoluongnhap(soluongnhap);
            kh.setDaban(daban);
            if(tonkho > soluongnhap){
                MessageDialog.showMessageError(this, "Hàng tồn kho không thể lớn hơn số lượng nhập", "Lỗi");
                return;
            }
            kh.setTonkho(tonkho);
            kh.setNgaytao(ngaytaos.getText());
//            khoDao dao = new khoDao();
            if(dao.insert(kh)){
                MessageDialog.showMessageDialog(mains, "Thêm dữ liệu thành công", "Lỗi");
                loadDataTable();
            }else{
                MessageDialog.showMessageError(mains, "Đã có lỗi xảy ra", "Lỗi");
            }
        }catch(Exception e){
            e.printStackTrace();
            MessageDialog.showMessageError(mains, e.getMessage(), "Lỗi");
        }
    }//GEN-LAST:event_addActionPerformed

    private void editsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editsActionPerformed
        // TODO add your handling code here:
        int masanpham = 0;
        int soluong = 0;
        int soluongnhap = 0;
        int daban = 0;
        int tonkho = 0;
        StringBuilder sb = new StringBuilder();

        DataValidor.kiemtra(masanphams, sb, "Mã sản phẩm không được để trống");
        DataValidor.kiemtra(soluongs, sb, "Số lượng không được để trống");
        DataValidor.kiemtra(soluongnhaps, sb, "Số lượng nhập không được để trống");
        DataValidor.kiemtra(dabans, sb, "Đã bán không được để trống");
        DataValidor.kiemtra(tonkhos, sb, "Tồn kho không được để trống");
        DataValidor.kiemtra(ngaytaos, sb, "Ngày tạo không được để trống");

        if(sb.length() > 0){
            MessageDialog.showMessageError(mains, sb.toString(), "Lỗi");
            return;
        }

        if(masanphams.getText().chars().allMatch(Character :: isDigit) && soluongs.getText().chars().allMatch(Character :: isDigit) &&
            soluongnhaps.getText().chars().allMatch(Character :: isDigit) && dabans.getText().chars().allMatch(Character :: isDigit)
            && tonkhos.getText().chars().allMatch(Character :: isDigit)){
            masanpham = Integer.parseInt(masanphams.getText());
            soluong = Integer.parseInt(soluongs.getText());
            soluongnhap = Integer.parseInt(soluongnhaps.getText());
            daban = Integer.parseInt(dabans.getText());
            tonkho = Integer.parseInt(tonkhos.getText());
        }else{
            MessageDialog.showMessageError(mains, "Mã sản phẩm, số lượng, số lượng nhập, đã bán, tồn kho phải là số", "Lỗi");
            return;
        }

        try{
            kho kh = new kho();
            kh.setId(ids);
            kh.setSanpham_id(masanpham);
            kh.setSoluong(soluong);
            kh.setSoluongnhap(soluongnhap);
            kh.setDaban(daban);
            if(soluongnhap < daban){
                MessageDialog.showMessageDialog(this, "Khong du hang", "Thong bao");
                return;
            }
            kh.setTonkho(tonkho);
            kh.setNgaytao(ngaytaos.getText());
//            khoDao dao = new khoDao();
            if(dao.update(kh)){
                MessageDialog.showMessageDialog(mains, "Thêm dữ liệu thành công", "Lỗi");
                loadDataTable();
            }else{
                MessageDialog.showMessageError(mains, "Đã có lỗi xảy ra", "Lỗi");
            }
        }catch(Exception e){
            e.printStackTrace();
            MessageDialog.showMessageError(mains, e.getMessage(), "Lỗi");
        }
    }//GEN-LAST:event_editsActionPerformed

    private void deletesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletesActionPerformed
        // TODO add your handling code here:

        if(MessageDialog.showConfirmDialog(mains, "Bạn chắc chắn muốn xóa bản ghi này không", "Lỗi") == JOptionPane.NO_OPTION){
            return;
        }

        try{
//            khoDao dao = new khoDao();
            String id = String.valueOf(ids);
            if(dao.delete(id)){
                MessageDialog.showMessageDialog(mains, "Xóa thành công", "Thông báo");
                loadDataTable();
            }else{
                MessageDialog.showMessageError(mains, "Đã có lỗi xảy ra", "Lỗi");
            }
        }catch(Exception e){
            e.printStackTrace();
            MessageDialog.showMessageError(mains, e.getMessage(), "Lỗi");
        }
    }//GEN-LAST:event_deletesActionPerformed

    private void tblTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblTableMouseClicked
        // TODO add your handling code here:

        try{
            int row = tblTable.getSelectedRow();
            if(row >= 0){
                ids = (int) tblTable.getValueAt(row, 0);
//                khoDao dao = new khoDao();
                kho list = dao.findAllid(ids);
                String sanphamid = String.valueOf(list.getSanpham_id());
                String soluong = String.valueOf(list.getSoluong());
                String soluongnhap = String.valueOf(list.getSoluongnhap());
                String daban = String .valueOf(list.getDaban());
                String tonkho = String.valueOf(list.getTonkho());
                if(list != null){
                    masanphams.setText(sanphamid);
                    soluongs.setText(soluong);
                    soluongnhaps.setText(soluongnhap);
                    dabans.setText(daban);
                    tonkhos.setText(tonkho);
                    ngaytaos.setText(list.getNgaytao());
                }
            }
        }catch(Exception e){
            e.printStackTrace();
            MessageDialog.showMessageError(mains, e.getMessage(), "Lỗi");
        }
    }//GEN-LAST:event_tblTableMouseClicked

    private void checkLogin(){
        int phanquyen = ShereData.dangnhapss.getPhanquyen();
        if(phanquyen == 1){
            quyen.setForeground(Color.red);
            quyen.setText("Admin");
        }
        if(phanquyen == 2){
            quyen.setForeground(Color.red);
            quyen.setText("Quản lý");
        }
        if(phanquyen == 3){
            quyen.setForeground(Color.red);
            quyen.setText("Bệnh nhân");
        }
    }
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        initTable();
        
        loadDataTable();
        
        phanquyen();
        checkLogin();
    }//GEN-LAST:event_formWindowOpened

    private void dabansFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dabansFocusLost
        // TODO add your handling code here:
        int tong = 0;
        int daban = 0;
        int soluongnhap = 0;
        
        if(soluongnhaps.getText().equals("") && dabans.getText().equals("")){
            MessageDialog.showMessageError(this, "Điền đầy đủ thông tin", "Lỗi");
            return;
        }
        
        
        daban = Integer.parseInt(dabans.getText());
        soluongnhap = Integer.parseInt(soluongnhaps.getText());
        
        if(soluongnhap < daban){
            MessageDialog.showMessageDialog(this, "Khong du hang", "Thong bao");
            return;
        }
        tong = soluongnhap - daban;
        
        
        String tongs = String.valueOf(tong);
        tonkhos.setText(tongs);
        
        
    }//GEN-LAST:event_dabansFocusLost

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(khoss.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(khoss.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(khoss.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(khoss.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                khoss dialog = new khoss(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JTextField dabans;
    private javax.swing.JButton deletes;
    private javax.swing.JButton edits;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField masanphams;
    private javax.swing.JTextField ngaytaos;
    private javax.swing.JButton quyen;
    private javax.swing.JTextField soluongnhaps;
    private javax.swing.JTextField soluongs;
    private javax.swing.JTable tblTable;
    private javax.swing.JTextField timkiems;
    private javax.swing.JTextField tonkhos;
    // End of variables declaration//GEN-END:variables
}
